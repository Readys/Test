@model IEnumerable<TTS.Models.ViewAttestationReport>

@using TTS.Models;
@using PagedList;
@using PagedList.Mvc
@{
    /**/

    ViewBag.Title = "Список аттестаций и тестируемых";
    ViewBag.Description = "";

    var attestation = ViewBag.Attestation;

    var allUsers = (List<L_User>)ViewBag.AllUsers;
    var actualTests = (List<Tests>)ViewBag.ActualTests;
    var appUserId = ViewBag.AppUser;
    IEnumerable<UserInRole> access = ViewBag.Access;

    //var attestationLMUserId = ViewBag.AttestationLMUsers;

    var checkHR = 0;
    if (access.Where(w => w.RoleId == 2).Count() > 0)
    {
        checkHR = 1;
    }

    var xx = 55;

}

<style>
    tbody td {
        cursor: auto;
    }
</style>

<div class="portlet">
    <div class="portlet-title">
        <div class="caption">
        </div>
        <div class="actions">
        </div>
    </div>
    <div class="portlet-body">
        <div class="col-lg-12" id="Table">
            <div class="m-demo" data-code-preview="true" data-code-html="true" data-code-js="false">
                <div class="m-demo__preview">
                    <div class="m-divider">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                    <div v-for="(att, index) in AttestationList">
                        <user-node v-on:add-node="addItem" :attestation="att" :attestation-name="att.Attestation.AttestationName"
                                   :attestation-id="att.Attestation.AttestationId" :boolcheckhr="bool_checkHR" v-on:result-auto-test="ResultAutoTest"
                                   :index="index" v-on:feed-back="Feedback" v-on:update-achievements-level="UpdateAchievementsLevel"
                                   v-on:save-recomend-level="SaveRecomendLevel" v-on:check-test="CheckTest" v-on:practic-test="PracticTest"
                                   v-on:verbal-test="VerbalTest"></user-node>
                    </div>

                </div>
            </div>
        </div>
        <hr />
        <div class="todo-tasklist-devider"></div>
        @{
            Html.PagedListPager((IPagedList)attestation, page => Request.CurrentExecutionFilePath + "?page=" + page);
        }
    </div>
</div>


<div id="MarkModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Текстовые ответы</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="index" />
                <div id="Table" v-for="(c, index) in questionList">
                    <h3>{{c.subCategoryName}}</h3>
                    <table class="table table-bordered m-table" border="1">
                        <thead>
                            <tr>
                                <th>№</th>
                                <th>Вопрос</th>
                                <th>Ответ на вопрос</th>
                                <th>Оценка</th>
                            </tr>
                        </thead>
                        <tr v-for="(q, indexQ) in c.TextQuestion">
                            <td width="3%">{{q.QuestionId}}</td>
                            <td width="30%">
                                <p>{{q.QuestionRu}}</p>
                                <p v-for="(p, index_P) in q.PictureList">
                                    <img style="max-width:100%" v-bind:src="'/images?id='+p" />
                                </p>
                            </td>
                            <td width="60%"><span v-if="q.Answers == 'Ваш ответ на вопрос, в пределах 1500 символов'">Нет ответа</span><span v-else>{{q.Answers}}</span></td>
                            <td width="7%">
                                <input class="form-control m-input" v-on:change="SaveTextMark(index,indexQ)" v-model="q.ManagerMark" type="number" value="0" id="example-number-input" max="5" min="0" style="min-width:100px;">
                            </td>
                        </tr>
                    </table>
                    <div class="info">
                        <div class="pull-right">

                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <span class="">{{summ}}% </span> <button id="" class="btn btn-success " v-on:click="SummTextAnswers(summ)">Сохранить</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<div id="ResultAutoTestModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Ответы на тест </h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="index" />
                <div id="Table" v-for="(c, index) in questionList0">
                    <h3>{{c.subCategoryName}}</h3>
                    <table class="table table-bordered m-table" border="1">
                        <thead>
                            <tr>
                                <th>№</th>
                                <th>Вопрос</th>
                                <th>Ответы на вопросы</th>
                            </tr>
                        </thead>
                        <tr v-for="(q, indexQ) in c.ViewQuestion">
                            <td width="3%">{{q.Question.QuestionId}}</td>
                            <td width="30%">
                                <p>{{q.Question.QuestionRu}}</p>
                                <p v-for="(p, index_P) in q.PictureList">
                                    <img style="max-width:100%" v-bind:src="'/images?id='+p" />
                                </p>
                            </td>
                            <td width="60%">
                                <div v-if="q.SubQuestion.length == 0">
                                    <span><b>Варианты ответов:</b> </span><p v-for="a1 in q.Answers">{{a1.AnswerRu}}</p>
                                    <hr style="width:90%;" />
                                    <span><b>Выбраные ответы:</b> </span><p v-for="a2 in q.AnswersSelected"><span v-if="a2.Weight > 0" style="color:forestgreen">{{a2.AnswerRu}}  (Вес: {{a2.Weight}}) </span><span v-else style="color:red">{{a2.AnswerRu}} Вес: ({{a2.Weight}})</span></p>
                                    <hr style="width:90%;" />
                                    <span><b>Правильные ответы:</b> </span><p v-for="a3 in q.RightAnswers">{{a3.AnswerRu}}</p>
                                </div>
                                <div v-else>
                                    <table class="table table-bordered m-table" border="1">
                                        <thead>
                                            <tr>
                                                <th>№</th>
                                                <th>Вопрос</th>
                                                <th>Ответы на вопросы</th>
                                            </tr>
                                        </thead>
                                        <tr v-for="(sq, indexSQ) in q.SubQuestion">
                                            <td width="3%">{{sq.Question.QuestionId}}</td>
                                            <td width="30%">
                                                <p>{{sq.Question.QuestionRu}}</p>
                                            </td>
                                            <td>
                                                <span><b>Выбраный ответ:</b> </span><p v-for="a1 in sq.AnswersSelected">{{a1.AnswerRu}}</p>
                                                <hr style="width:90%;" />
                                                <span><b>Правильный ответ:</b> </span><p v-for="a2 in sq.SubAnswers">{{a2.AnswerRu}}</p>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>

</div>

<div id="FeedbackModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Отзыв</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="index" />
                <div id="Table" v-for="(c, index) in questionList4">
                    <h3>Отзыв</h3>
                    <table class="table table-bordered m-table" border="1">
                        <thead>
                            <tr>
                                <th>№</th>
                                <th>Вопрос</th>
                                <th>Ответы на вопросы</th>
                            </tr>
                        </thead>
                        <tr v-for="(q, indexQ) in c.ViewQuestion">
                            <td width="3%">{{q.Question.QuestionId}}</td>
                            <td width="30%">
                                <p>{{q.Question.QuestionRu}}</p>
                                <p v-for="(p, index_P) in q.PictureList">
                                    <img style="max-width:100%" v-bind:src="'/images?id='+p" />
                                </p>
                            </td>
                            <td width="60%">
                                <div v-if="q.TextAnswer2 == null">
                                    <span><b>Варианты ответов:</b> </span><p v-for="a1 in q.Answers">{{a1.AnswerRu}}</p>
                                    <hr style="width:90%;" />
                                    <span><b>Выбраные ответы:</b> </span><p v-for="a2 in q.AnswersSelected"><span v-if="a2.Weight > 0" style="color:forestgreen">{{a2.AnswerRu}}  (Вес: {{a2.Weight}}) </span><span v-else style="color:red">{{a2.AnswerRu}} Вес: ({{a2.Weight}})</span></p>

                                </div>
                                <div v-if="q.TextAnswer2 != null">
                                    <p>{{q.TextAnswer2}}</p>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>

</div>


@section Styles {
    <!-- BEGIN PAGE LEVEL STYLES -->
    <!-- END PAGE LEVEL STYLES -->
    <link rel="stylesheet" type="text/css" href="~/Content/css/select2.min.css" />
    <link href="~/Content/PagedList.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
}
@section Scripts {

    <script src="~/Scripts/axios.min.js"></script>
    <script src="~/Scripts/select2.min.js"></script>

    <script type="text/x-template" id="user-template">
        <ul class="m-nav m-nav--active-bg" id="m_nav" role="tablist">
            <li class="m-nav__item m-nav__item--active">
                <a v-on:click="$emit('add-node', attestation)" class="m-nav__link collapsed" role="tab" v-bind:id="'m_nav_link_'+attestationId" data-toggle="collapse" v-bind:href="'#m_nav_sub_'+attestationId" aria-expanded="false">
                    <i class="m-nav__link-icon flaticon-chat-1"></i>
                    <span class="m-nav__link-title">
                        <span class="m-nav__link-wrap">
                            <span class="m-nav__link-text" style="font-size:large;"><b>{{attestationName}}</b></span>
                        </span>
                    </span>
                    <span class="m-nav__link-arrow"></span>
                </a>
                <ul class="m-nav__sub collapse" v-bind:id="'m_nav_sub_'+attestationId" role="tabpanel" aria-labelledby="'m_nav_link_'+attestationId" data-parent="#m_nav" style="">
                    <li class="m-nav__item" style="padding:10px; color:gray;">
                        <span v-if="attestation.LazyUser.length != 0">Не начинали проходить аттестацию:</span>
                        <span v-for="lu in attestation.LazyUser">{{lu.NameRu}}; </span>
                        <span v-if="attestation.LazyUser.length == 0"><a :href="`/Report/CreateDetailedExcel?CertificationId=${attestationId}&Level=${attestation.Attestation.CertificationLevelToPass}`" style="display:block; margin-left:auto; margin-right: 0; font-size:15px; width:100%;" class="btn btn-outline-success m-btn m-btn--custom"><i>Сформировать отчет</i></a></span>

                        <hr />
                    </li>
                    <li class="m-nav__item" v-for="(t, indexT) in attestation.ViewUsersAttestationReport" v-if="t.ViewResultTests.length != 0">
                        <table style="">
                            <tr>
                                <td><span style="font-size:18px;"><b>{{t.User.NameRu}}</b></span> </td>
                                <td v-if="attestation.Attestation.FeedbackId"><label style="margin-left:10px; margin-top:4px;">Отзыв:</label></td>
                                <td v-if="attestation.Attestation.FeedbackId">
                                    <div class="kt-demo-icon">
                                        <button v-on:click="$emit('feed-back', index, indexT)" type="button" class="btn m-btn--pill m-btn--air  btn-secondary" style="margin: 5px;">
                                            <i class="flaticon-list"></i>
                                        </button>
                                    </div>
                                </td>
                                <td><label style="margin-left:10px; margin-top:4px;">Текущий уровень:</label></td>
                                <td>
                                    <div style="width:80px;" class="input-group input-group-sm">
                                        <input v-on:change="$emit('update-achievements-level', t.UsersAchievements.LevelId, t.User.UserId)" style="border-radius:20px; margin-left:5px;" type="number" v-bind:disabled="boolcheckhr" v-model="t.UsersAchievements.LevelId" min="0" class="form-control m-input" aria-describedby="basic-addon2">
                                    </div>
                                </td>
                                <td><label style="margin-left:10px; margin-top:4px;">Рекомендуемый уровень:</label></td>
                                <td>
                                    <div style="width:80px;" class="input-group input-group-sm">
                                        <input v-on:change="$emit('save-recomend-level',index, indexT, t.RecomendLevel, t.User.UserId)" style="border-radius:20px; margin-left:5px;" v-bind:disabled="boolcheckhr" v-model="t.RecomendLevel" type="number" min="0" class="form-control m-input" aria-describedby="basic-addon2">
                                    </div>
                                </td>
                                <td v-if="@appUserId == attestation.Attestation.LMUserId"><label style="margin-left:10px; margin-top:4px;">Подверждение уровня (LM):</label></td>
                                <td v-if="@appUserId == attestation.Attestation.LMUserId">
                                    <span class="m-switch m-switch--outline m-switch--icon m-switch--success">
                                        <label style="margin-top:7px; margin-left:5px;">
                                            <input v-on:change="$emit('save-recomend-level',index, indexT, t.RecomendLevel, t.User.UserId)" v-model="t.LMConfirmRL" type="checkbox" name="ConfirmLevel">
                                            <span></span>
                                        </label>
                                    </span>
                                </td>
                                <td v-if="boolcheckhr"><label style="margin-left:10px; margin-top:4px;">Подверждение уровня (HR):</label></td>
                                <td v-if="boolcheckhr">
                                    <span class="m-switch m-switch--outline m-switch--icon m-switch--success">
                                        <label style="margin-top:7px; margin-left:5px;">
                                            <input v-on:change="$emit('save-recomend-level',index, indexT, t.RecomendLevel, t.User.UserId)" v-model="t.HRConfirmRL" type="checkbox" name="ConfirmLevel">
                                            <span></span>
                                        </label>
                                    </span>
                                </td>
                            </tr>
                        </table>
                        <br />
                        <table class="table table-bordered col-md-12" style="width:98%; margin-top:1px;" id="">
                            <thead>
                                <tr>
                                    <th style="width:5%; text-align:center; vertical-align:middle;">
                                        <div style="margin-bottom:3px;">
                                            <span>№</span>
                                        </div>
                                    </th>
                                    <th style="width:19%; text-align:center; vertical-align:middle;">
                                        <span>Результат теста</span>
                                    </th>
                                    <th style="width:19%; text-align:center; vertical-align:middle;">
                                        <span>Текстовые ответы</span>
                                    </th>
                                    <th style="width:19%; text-align:center; vertical-align:middle;">
                                        <label>Практический экзамен</label>
                                    </th>
                                    <th style="width:19%; text-align:center; vertical-align:middle;">
                                        <label>Устный экзамен</label>
                                    </th>
                                    <th style="width:19%; text-align:center; vertical-align:middle;">
                                        <label>Средний балл / Порог - {{t.TargetProcent}}% </label>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="(test, i) in t.ViewResultTests">
                                    <td align="center" style="width:10%; text-align:center; vertical-align:middle;">
                                        {{test.TestId}}
                                    </td>
                                    <td align="center" style="width:10%; text-align:center; vertical-align:middle;">
                                        <button v-on:click="$emit('result-auto-test', index, indexT, i)" type="button" class="btn m-btn--pill m-btn--air  btn-secondary">{{test.WeightResult}}% </button>
                                    </td>
                                    <td align="center" style="width:10%; text-align:center; vertical-align:middle;">
                                        <button v-on:click="$emit('check-test',index, indexT, i)" type="button" class="btn m-btn--pill m-btn--air  btn-secondary" style="margin:5px;">{{test.CheckedText}}%</button>
                                    </td>
                                    <td align="center" style="width:10%; text-align:center; vertical-align:middle;">
                                        <input v-on:change="$emit('practic-test', index, indexT, i)" type="number" class="form-control m-input m-input--air m-input--pill" v-model="test.PracticalExamination" id="example-number-input" max="100" min="0" style="min-width:100px; max-width:120px;">
                                    </td>
                                    <td align="center" style="width:10%; text-align:center; vertical-align:middle;">
                                        <input v-on:change="$emit('verbal-test', index, indexT, i)" class="form-control m-input m-input--air m-input--pill" v-model="test.VerbalExamination" type="number" id="example-number-input" max="100" min="0" style="min-width:100px; max-width:120px;">
                                    </td>
                                    <td align="center" style="width:10%; text-align:center; vertical-align:middle;">
                                        <label id="summary">{{(parseInt(test.WeightResult) + parseInt(test.CheckedText) + parseInt(test.PracticalExamination) + parseInt(test.VerbalExamination))/4}}</label>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </li>
                </ul>
            </li>
        </ul>
    </script>

    <script>

        $(document).ready(function () {
            var checkHR = @checkHR;
            var boolcheckhr = true;
            if (checkHR == 1) {
                boolcheckhr = true;
            } else {
                boolcheckhr = false;
            }

        });

        function createData() {
            var checkHR = @checkHR;
            var boolcheckhr = true;
            if (checkHR == 1) {
                boolcheckhr = true;
            } else {
                boolcheckhr = false;
            }
            return boolcheckhr;
        }
    </script>

    <script>

        Vue.component('user-node', {
            template: '#user-template',
            props: ['attestation', 'attestationName', 'attestationId', 'boolcheckhr', 'index',],
            data: function () {
                return {
                    isOpen: true,
                    showChildren: true,
                    edit: false,
                    name: "",
                }
            },
            computed: {

            },
            methods: {

            }
        })


          var vm = new Vue({
            el: '#Table',
            data: {
                AttestationList:@Html.Raw(Json.Encode(Model)),
                bool_checkHR: createData(),
                testlabel: "testlabel",             
            },
              computed: {

            },
              methods: {
                  addItem: function (attestation) {
                      mApp.blockPage('.page-content');
                      //alert(attestation.Attestation.AttestationId);
                      axios.get('/AJAX/GetUserMark', {
                          params: {
                              id: attestation.Attestation.AttestationId,
                          }
                      }).then(response => {
                          //length_data = response.data.userList.length;
                          //for (i = 0; i <= length_data; i++) {
                          //    attestation.ViewUsersAttestationReport = response.data.userList[i];
                          //}
                          attestation.ViewUsersAttestationReport = response.data.userList;
                          mApp.unblockPage('.page-content');

                      }).catch(error => {
                          alert('Error')
                          mApp.unblockPage('.page-content');
                      });

                  },
                  Feedback: function (index, indexT) {
                      mApp.blockPage('.page-content');
                      var userId = this.AttestationList[index].ViewUsersAttestationReport[indexT].User.UserId;
                      var attestationId = this.AttestationList[index].Attestation.AttestationId;
                      var feedbackId = this.AttestationList[index].Attestation.FeedbackId;

                      //alert(testId);
                      axios.post('/Home/FeedbackView/', {
                          userId: userId, attestationId: attestationId, feedId: feedbackId,
                      }, {
                              headers: {
                                  'Content-Type': 'application/json',
                              }
                          }).then(response => {
                              vm4.questionList4 = response.data;
                              $('#FeedbackModal').modal('show');
                              mApp.unblockPage('.page-content');
                          }).catch(error => {
                              alert('Error');
                              mApp.unblockPage('.page-content');
                          });
                  },
                  ResultAutoTest: function (index, indexT, i) {
                      mApp.blockPage('.page-content');
                      var userId = this.AttestationList[index].ViewUsersAttestationReport[indexT].User.UserId;
                      var attestationId = this.AttestationList[index].Attestation.AttestationId;
                      var testId = this.AttestationList[index].ViewUsersAttestationReport[indexT].ViewResultTests[i].TestId;
                      //alert(testId);
                      //window.open("/Home/CheckTest?userId=" + userId + "&attestationId=" + attestationId + "&testId=" + testId);
                      axios.post('/Home/ResultTest/', {
                          userId: userId, attestationId: attestationId, testId: testId,
                      }, {
                              headers: {
                                  'Content-Type': 'application/json',
                              }
                          }).then(response => {
                              vm3.questionList0 = response.data;
                              $('#ResultAutoTestModal').modal('show');
                              mApp.unblockPage('.page-content');
                          }).catch(error => {
                              alert('Error');
                              mApp.unblockPage('.page-content');
                          });
                  },
                  CheckTest: function (index, indexT, i) {
                    mApp.blockPage('.page-content');
                    var userId = this.AttestationList[index].ViewUsersAttestationReport[indexT].User.UserId;
                    var attestationId = this.AttestationList[index].Attestation.AttestationId;
                    var testId = this.AttestationList[index].ViewUsersAttestationReport[indexT].ViewResultTests[i].TestId;
                    //alert(testid);
                    //window.open("/home/checktest?userid=" + userid + "&attestationid=" + attestationid + "&testid=" + testid);
                    axios.post('/Home/CheckTest/', {
                        userId: userId, attestationId: attestationId, testId: testId,
                    }, {
                        headers: {
                            'Content-Type': 'application/json',
                        }
                        }).then(response => {
                            vm2.questionList = response.data;
                            vm2.testid = testId;
                            vm2.indexAtt = index;
                            vm2.indexTest = indexT;
                            vm2.ay = i;
                            vm2.summMark();
                            $('#MarkModal').modal('show');
                            mApp.unblockPage('.page-content');
                    }).catch(error => {
                        alert('Error');
                        mApp.unblockPage('.page-content');
                    });
                },
                  PracticTest: function (index, indexT, i) {
                    var userId = this.AttestationList[index].ViewUsersAttestationReport[indexT].User.UserId;
                    var attestationId = this.AttestationList[index].Attestation.AttestationId;
                    var testId = testId = this.AttestationList[index].ViewUsersAttestationReport[indexT].ViewResultTests[i].TestId;
                    var practicalExamination = this.AttestationList[index].ViewUsersAttestationReport[indexT].ViewResultTests[i].PracticalExamination;
                    axios.post('/AJAX/SavePracticTest/', {
                        userId: userId, attestationId: attestationId, testId: testId, practicalExamination: practicalExamination,
                    }, {
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        }).then(response => {
                            vm2.questionList = response.data;
                        }).catch(error => {
                            alert('Error');
                        });
                },
                  VerbalTest: function (index, indexT, i) {
                    var userId = this.AttestationList[index].ViewUsersAttestationReport[indexT].User.UserId;
                    var attestationId = this.AttestationList[index].Attestation.AttestationId;
                    var testId = testId = this.AttestationList[index].ViewUsersAttestationReport[indexT].ViewResultTests[i].TestId;
                    var verbalExamination = this.AttestationList[index].ViewUsersAttestationReport[indexT].ViewResultTests[i].VerbalExamination;
                    //alert(verbalExamination);
                    axios.post('/AJAX/SaveVerbalTest/', {
                        userId: userId, attestationId: attestationId, testId: testId, verbalExamination: verbalExamination,
                    }, {
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        }).then(response => {
                            vm2.questionList = response.data;
                        }).catch(error => {
                            alert('Error');
                        });
                  },
                  UpdateAchievementsLevel: function (level, userId) {
                      //alert(userId);
                      axios.post('/AJAX/UpdateAchievementsLevel/', {
                          userId: userId, level: level, appUserId: @appUserId
                      }, {
                              headers: {
                                  'Content-Type': 'application/json',
                              }
                          }).then(response => {
                              alert(response.data);
                          }).catch(error => {
                              alert('Error');
                          });
                  },
                  SaveRecomendLevel: function (index, indexT, recommendedLevel, userId) {
                      var attestationId = this.AttestationList[index].Attestation.AttestationId;
                      var LMConfirm = this.AttestationList[index].ViewUsersAttestationReport[indexT].LMConfirmRL;
                      var HRConfirm = this.AttestationList[index].ViewUsersAttestationReport[indexT].HRConfirmRL;
                      var LMConfirm = LMConfirm ? 1 : 0;
                      var HRConfirm = HRConfirm ? 1 : 0;
                      var summ = $("#summary").html();
                      var number = parseInt(summ);
                      //alert(number);

                      axios.post('/AJAX/SaveRecomendLevel/', {
                          userId: userId, attestationId: attestationId, recommendedLevel: recommendedLevel, appUserId: @appUserId, summation: number,
                          LMConfirm: LMConfirm, HRConfirm: HRConfirm,
                      }, {
                              headers: {
                                  'Content-Type': 'application/json',
                              }
                          }).then(response => {
                              vm2.questionList = response.data;
                              alert(response.data);
                          }).catch(error => {
                              alert('Error');
                          });
                  },
            }
        });

    </script>

    <script>
        var vm2 = new Vue({
            el: '#MarkModal',
            data: {
                questionList: [{ "subCategoryId": 2123, "ParentId": 0, "subCategoryName": "238 Common RAIL", "subCategoryResult": null, "subCategoryTextResult": null, "ViewQuestion": null, "TextQuestion": [{ "QuestionId": 4149, "QuestionRu": "необходимые условия для запуска С6.6 (минимум 4)", "PictureList": [], "Answers": "Ваш ответ на вопрос, в пределах 1500 символов", "ManagerMark": 1 }], "TestsItems": null, "SubCategories": null }, { "subCategoryId": 2127, "ParentId": 0, "subCategoryName": "247 Hydraulics  Diagnostic  Диагностика гидравлической системы", "subCategoryResult": null, "subCategoryTextResult": null, "ViewQuestion": null, "TextQuestion": [{ "QuestionId": 4190, "QuestionRu": "Укажите основное отличие гидравлической системы грейдера 140М от гидравлической системы экскаватора 320D. Указать\nНазвание и ПРИНЦИП ДЕЙСТВИЯ гидр-ой системы грейдера 140М  и  гидр-ой системы экскаватора 320D\n", "PictureList": [], "Answers": "Ваш ответ на вопрос, в пределах 1500 символов", "ManagerMark": 1 }], "TestsItems": null, "SubCategories": null }],
                testid: 0,
                indexAtt: 0,
                indexTest: 0,
                ay: 0,
                summ: 0,
            },
            computed: {
            },
            methods: {
                summMark: function () {
                    var dlina = this.questionList[0].TextQuestion.length;
                    var max = 5;
                    var maxsumm = 0;
                    //alert(dlina);
                    var count = 0;
                    for (var i = 0; i < dlina; i++) {
                        var mark = parseInt(this.questionList[0].TextQuestion[i].ManagerMark) || 0;
                        count = count + mark;

                    }
                    maxsumm = dlina * max
                    count = (count / maxsumm) * 100;
                    this.summ = Math.round(count);
                },
                SaveTextMark: function (index, indexQ) {
                    var attestationId = vm.AttestationList[this.indexAtt].Attestation.AttestationId;
                    var qid = this.questionList[index].TextQuestion[indexQ].QuestionId
                    //alert(this.testid);
                    var mark = this.questionList[index].TextQuestion[indexQ].ManagerMark;
                    this.summMark();
                    axios.post('/AJAX/SaveTextMark/', {
                        qid: qid, mark: mark,
                        attestationId: attestationId, testId: this.testid,
                    }, {
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        }).then(response => {

                        }).catch(error => {
                            alert('Error');
                        });
                },
                SummTextAnswers: function (counter) {
                    var attestationId = vm.AttestationList[0].Attestation.AttestationId;
                    axios.post('/AJAX/SummTextAnswers/', {
                        summ: counter, attestationId: attestationId, testId: this.testid,
                    }, {
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        }).then(response => {

                            alert("Результат сохранен");
                            vm.AttestationList[this.indexAtt].ViewUsersAttestationReport[this.indexTest].ViewResultTests[this.ay].CheckedText = parseInt(counter);
                        }).catch(error => {
                            alert('Error');
                        });
                },
            },
            beforUpdate: function () {
                this.summMark();
            },
        });

        var vm3 = new Vue({
            el: '#ResultAutoTestModal',
            data: {
                questionList0: [{ "subCategoryId": 2, "subCategoryName": "Гидравлика", "subCategoryResult": 0, "ViewQuestion": [{ "QuestionId": 33, "SubQuestion": [{ "Question": { "QuestionId": 33, "QuestionRu": "Опишите работу обратного клапана в гидравлической системе?" }, "SubAnswers": [{ "AnswerId": 1554, "value": 1554, "QuestionId": 0, "Weight": 0, "AnswerRu": "Ответ 2", "isEdit": false }] }], "Question": { "QuestionId": 33, "QuestionRu": "Опишите работу обратного клапана в гидравлической системе?", "CreateDate": "\/Date(1539177971627)\/", "ModifedDate": "\/Date(1542635035193)\/", "CreatedByUserId": 1, "TypeId": 53, "LevelId": 7, "Deleted": 0, "Published": 1 }, "CategoryList": null, "DepartmentList": null, "PictureList": [136], "LevelsList": null, "isEdit": false, "Answers": null, "AnswersSelected": [{ "AnswerId": 28, "QuestionId": 33, "Weight": 0, "AnswerRu": "Нужен как часть «гидрозамка»", "isEdit": false }], "QuestionRightProcent": 0, "TextAnswer": 0 }], "TestsItems": null }],
                testid: 0,
                indexAtt: 0,
                indexTest: 0,
            },
            computed: {
            },
            methods: {

            }
        });

        var vm4 = new Vue({
            el: '#FeedbackModal',
            data: {
                questionList4: [{ "subCategoryId": 2, "subCategoryName": "Гидравлика", "subCategoryResult": 0, "ViewQuestion": [{ "QuestionId": 33, "SubQuestion": [{ "Question": { "QuestionId": 33, "QuestionRu": "Опишите работу обратного клапана в гидравлической системе?" }, "SubAnswers": [{ "AnswerId": 1554, "value": 1554, "QuestionId": 0, "Weight": 0, "AnswerRu": "Ответ 2", "isEdit": false }] }], "Question": { "QuestionId": 33, "QuestionRu": "Опишите работу обратного клапана в гидравлической системе?", "CreateDate": "\/Date(1539177971627)\/", "ModifedDate": "\/Date(1542635035193)\/", "CreatedByUserId": 1, "TypeId": 53, "LevelId": 7, "Deleted": 0, "Published": 1 }, "CategoryList": null, "DepartmentList": null, "PictureList": [136], "LevelsList": null, "isEdit": false, "Answers": null, "AnswersSelected": [{ "AnswerId": 28, "QuestionId": 33, "Weight": 0, "AnswerRu": "Нужен как часть «гидрозамка»", "isEdit": false }], "QuestionRightProcent": 0, "TextAnswer": 0 }], "TestsItems": null }],
                testid: 0,
                indexAtt: 0,
                indexTest: 0,
            },
            computed: {
            },
            methods: {

            }
        });

    </script>

}
