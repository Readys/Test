@model  TTS.Models.TestTemplate
@using TTS.Models;
@{

    ViewBag.Title = "Создание шаблонов тестов";
    var tree = (List<Tree>)ViewBag.Tree;
    var SelectDepartmentsList = ViewBag.SelectDepartmentsList;
    var selectedCategory = ViewBag.SelectedCategory;
    var allCategoryList = ViewBag.AllCategoryList;
    var selectedTreeQuestion = ViewBag.SelectedTreeQuestion;

    var a = 0;
}
<br />
<br />
<br />

<div class="portlet light " id="app-5">
    <div class="portlet-body form">
        <div v-show="errors.length" id="err" class="alert alert-danger ">
            <p>
                <b>Пожалуйста исправьте следующие ошибки:</b>
                <ul>
                    <li v-for="error in errors">{{ error }}</li>
                </ul>
            </p>
        </div>
        <div class="form-group" id="who" style="margin-bottom: 10px; margin-top: 15px;">
            <label class="control-label col-md-3">
                Название:
            </label>
            <div class="col-md-4">
                @Html.TextBoxFor(model => Model.NameRu, new { @class = "form-control Name", @style = "font-size:12px", @rows = "1" })
            </div>
        </div>
        <!--
        <div class="form-group" style="margin-bottom: 10px; margin-top: 15px;">
            <label class="control-label col-md-3">Включить режим опросника:</label>
            <div class="col-3">
                <span class="m-switch m-switch--outline m-switch--icon m-switch--success">
                    <label style="margin-top:7px; margin-left:5px;">
                        <input v-on:change="Feedback()" v-model="typeTemplateId" type="checkbox" name="Feedback">
                        <span></span>
                    </label>
                </span>
            </div>
        </div>
        -->
        <template v-if="typeTemplateId == false || typeTemplateId == 0 || typeTemplateId == null">
            <div class="form-group" id="duration" style="margin-bottom: 10px; margin-top: 15px;">
                <label class="control-label col-md-3">
                    Продолжительность тестирования (в минутах):
                </label>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => Model.Duration, new { @class = "form-control Duration", @style = "font-size:12px", @rows = "1", @type = "number", @placeholder = "1", @min = "1", })
                </div>
            </div>
            <div class="form-group" id="threshold" style="margin-bottom: 10px; margin-top: 15px;">
                <label class="control-label col-md-3">
                    Порог прохождения (%):
                </label>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => Model.TargetProcent, new { @class = "form-control targetProcent", @style = "font-size:12px", @rows = "1", @placeholder = "1", @min = "1", type = "number", max = "100" })
                </div>
            </div>
            <div class="form-group" id="tryCount" style="margin-bottom: 10px; margin-top: 15px;">
                <label class="control-label col-md-3">
                    Количество попыток:
                </label>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => Model.TryCount, new { @class = "form-control TryCount", @style = "font-size:12px", @rows = "1", @placeholder = "1", @type = "number", @min = "1", @max = "100" })
                </div>
            </div>
            <div class="form-group" id="level" style="margin-bottom: 10px; margin-top: 15px;">
                <label class="control-label col-md-3">
                    Выберите уровень вопроса
                </label>
                <div class="col-md-7">
                    @Html.ListBox("LevelsList", null, new { @class = "form-control f-selectL" })
                </div>
            </div>
        </template>
        <div class="form-group" id="depId" style="margin-bottom: 10px; margin-top: 15px;">
            <label class="control-label col-md-3">
                Выбирите дивизион компании
            </label>
            <div class="col-md-7">
                @Html.ListBox("DepartmentsList", null, new { @class = "form-control f-selectD" })
            </div>
        </div>
    </div>
</div>

<div class="row col-md-12" id="app-4">
    <label class="row col-md-12">Темы</label>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <select style="max-width:100%; min-width: 200px;" size="20" class="form-control" id="list1">
                    <option v-for="(option1, indexA) in testTemplateItemSubject" v-on:click="LeftToRight(indexA)" v-bind:value="option1.TreeId">
                        <template v-if="option1.ParentId !== null">
                            &nbsp;/&nbsp;
                        </template>{{option1.NameRu}}
                    </option>
                </select>
            </div>
            <!--
            <div class="col-md-1">
                <button class="btn btn-primary btn-block md-2" v-on:click="allToRight(index)">&raquo;</button>
                <button class="btn btn-primary btn-block md-2" v-on:click="allToLeft()">&laquo;</button>
            </div>
                -->
            <div class="col-md-4">
                <select style="max-width:100%; min-width: 200px;" size="20" class="form-control" id="list2" multiple>
                    <option v-for="(option2, indexS) in testTemplateItemSelectedSubject" v-on:click="RightToLeft(indexS)" v-bind:value="option2.TreeId">{{option2.NameRu}}</option>
                </select>
            </div>
            <div class="col-md-4">
                <ul style="border: none;" size="10" class="form-control" id="list2">
                    <li style="list-style-type: none;" v-for="(option3, indexB) in testTemplateItemSelectedSubject" v-on:click="" v-bind:value="option3.TreeId">
                        {{option3.NameRu}} <input style="width:40px;" title="Количество вопросов" v-model="option3.QuestionQuantity" v-on:change="EditQuestionQuantity(indexB)" v-bind:value="option3.QuestionQuantity" />
                    </li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                <label>Всего вопросов:</label> <span>{{counter}}</span>
            </div>
        </div>
    </div>
</div>
<div class="row col-md-12">
    <!--<a onclick="CatCreate(); return false;" class="btn btn-success" href="javascript:;">Добавить тему</a>&nbsp;-->
    <a class="btn btn-success saved" href="javascript:;">Сохранить</a>&nbsp;
    <a class="btn btn-danger pull-left" href="/TTS/">Отмена</a>
</div>
<div class="info row col-md-12" style="margin-bottom:20px;">

</div>

<div id="CatEditor" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Добавление темы</h4>
            </div>
            <input type="hidden" name="Type" value="Новая тема" />
            <div class="modal-body">
                <input type="hidden" id="catId" />
                <label class="control-label col-md-6" style="display:none">
                    Название темы:
                </label>
                <input id="isNew" type="text" name="NameCategory" rows="1" class="form-control" style="min-width: 95%; margin-left:30px;" />
            </div>

            <div class="modal-footer">
                <a id="CatCreateToSave" style="color:white" class="btn btn-success" onclick="CatNew()">Создать</a>
                <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>

</div>


@section Scripts
{
    <script src="~/Plugins/Dropzone/min/dropzone.min.js"></script>
    <script src="~/Scripts/vue.js"></script>
    <script src="~/Scripts/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/js/select2.min.js"></script>
    <script src="https://unpkg.com/vue-multiselect@2.1.0"></script>
    <script src="~/Scripts/polyfill.min.js"></script>
    <script src="/Plugins/bootstrap-switch/js/bootstrap-switch.min.js" type="text/javascript"></script>

    <script src="https://cdn.jsdelivr.net/npm/vee-validate@latest/dist/vee-validate.js"></script>

    <script type="text/javascript">

        $(document).ready(function () {
            $('.f-selectD').select2({
                tags: true,
                tokenSeparators: [',', ' ']
            });
            $('.f-selectL').select2({
                tags: true,
                tokenSeparators: [',', ' ']
            });

        });


        var app5 = new Vue({
            el: '#app-5',
            data: {
                typeTemplateId: @Html.Raw(Json.Encode(Model.TypeTemplateId)),
                templateId: @Html.Raw(Json.Encode(Model.TestTemplateId)),
                errors: [],
            },
            methods: {
                Feedback: function () {
                    //mApp.blockPage('.page-content');
                    var f = this.typeTemplateId;
                    var opros = 0;
                    if (f == true) {
                        opros = 1;

                    }
                    //alert(f);

                axios.post('/AJAX/Feedback/', {
                        id: this.templateId, opros: opros
                      }, {
                              headers: {
                                  'Content-Type': 'application/json',
                              }
                        }).then(response => {
                           // $('#MarkModal').modal('show');

                          }).catch(error => {
                              alert('Error');
                             // $('#MarkModal').modal('show');
                          });
                },
                checkForm: function () {
                    nameru = $("#NameRu").val();
                    duration = $("#Duration").val();
                    //alert(nameru);
                    this.errors = [];
                    if (!nameru) {
                        this.errors.push("Введите название аттестации");
                    };
                    if (!duration || duration < 2) {
                        this.errors.push("Укажите время. Не меньше 2 минут");
                    };

                    if (this.errors.length) {
                        mApp.scrollTo(nameru, -200);
                    }

                }

            },

        });

        var app4 = new Vue({
            el: '#app-4',
            data: {
                testTemplateItems: @Html.Raw(Json.Encode(Model)),
                testTemplateItemSubject: @Html.Raw(Json.Encode(allCategoryList)),
                testTemplateItemSelectedSubject: @Html.Raw(Json.Encode(selectedTreeQuestion)),
                testTemplateItemSelectedSubjectQuestionQuantity: [],
            },
            methods: {
                LeftToRight: function (indexA) {
                    var select = this.testTemplateItemSubject[indexA];
                    var id = this.testTemplateItems.TestTemplateId;

                    //alert(id)
                    this.testTemplateItemSelectedSubject.push({ "NameRu": select.NameRu, "TreeId": select.TreeId, "TestTemplateId": this.testTemplateItems.TestTemplateId, "QuestionQuantity": 10 });
                    this.testTemplateItemSubject.splice(indexA, 1);
                    this.testTemplateItemSelectedSubjectQuestionQuantity.push({ "NameRu": select.NameRu, "QuestionQuantity": 10 })

                    axios.post('/AJAX/AddSubjectForTestTemplate/', { Id: id, TreeId: select.TreeId, QuestionQuantity: 10 });
                },

                RightToLeft: function (indexS) {
                    var select = this.testTemplateItemSelectedSubject[indexS];
                    var id = this.testTemplateItemSelectedSubject[indexS].TestTemplateId;

                   // alert(select.NameRu);
                    this.testTemplateItemSubject.push(select);
                    this.testTemplateItemSelectedSubject.splice(indexS, 1);

                    axios.post('/AJAX/DeleteSubject/', { Id: id, TreeId: select.TreeId}, {
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    }).then(response => {
                        //alert(response.data);
                    }).catch(error => {
                        alert('Error')
                    });

                },
                allToRight: function (index) {
                },
                allToLeft: function (index) {
                    this.testTemplateItems[index].AllCategoryList = testTemplateItemSubject;
                },
                EditQuestionQuantity: function (indexB) {
                    var qq = this.testTemplateItemSelectedSubject[indexB].QuestionQuantity;
                    var id = this.testTemplateItemSelectedSubject[indexB].TestTemplateId;
                    var treeid = this.testTemplateItemSelectedSubject[indexB].TreeId;
                    //alert(id);
                    axios.post('/AJAX/UpdateQuestionQuantityForTestTemplate/', { Id: id, QuestionQuantity: qq, TreeId: treeid }, {
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    }).then(response => {
                        //alert(response.data);
                    }).catch(error => {
                        alert('Error')
                    });
                },
            },
            computed: {
                counter: {
                    get: function () {
                        var dlina = this.testTemplateItemSelectedSubject.length;
                        var count = 0;
                        for (var i = 0; i < dlina; i++) {
                            count = count + parseInt(this.testTemplateItemSelectedSubject[i].QuestionQuantity);
                        }
                        return count
                    },
                },
            },
            updated: function () {
                //alert("!");

            },
            created: function () {

                //alert("hgg");
               // this.testTemplateItemSelectedSubjectQuestionQuantity.push({ "NameRu": "test", "Quantity": 10 })
            }
        });


          $('.f-selectD').on("change", function (e) {
            var selected_element = $(e.currentTarget);
            var select_val = selected_element.val();
            arrSelectVal = JSON.parse("[" + select_val + "]");
            axios.post('/AJAX/UpdateDepartmentsForTestTemplate/', {id: @Model.TestTemplateId, CategoryList: arrSelectVal}, {
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                //alert(response.data);
            }).catch(error => {
                alert('Error')
            });
        });

        $('.f-selectL').on("change", function (e) {
            var selected_element = $(e.currentTarget);
            var select_val = selected_element.val();
            arrSelectVal = JSON.parse("[" + select_val + "]");
            axios.post('/AJAX/UpdateLevelsForTestTemplate/', {id: @Model.TestTemplateId, CategoryList: arrSelectVal}, {
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                //alert(response.data);
            }).catch(error => {
                alert('Error')
            });
        });

        $('.Name').on("change", function (e) {
            var selected_element = $(e.currentTarget);
            var select_val = selected_element.val();
            //alert(select_val);
            axios.post('/AJAX/EditName/', { id: @Model.TestTemplateId, Name: select_val}, {
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                //alert(response.data);
            }).catch(error => {
                alert('Error')
            });
        });

        $('.Duration').on("change", function (e) {
            var selected_element = $(e.currentTarget);
            var select_val = selected_element.val();
            //alert(select_val);
            axios.post('/AJAX/EditDuration/', { id: @Model.TestTemplateId, Duration: select_val}, {
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                //alert(response.data);
            }).catch(error => {
                alert('Error')
            });
        });

        $('.TryCount').on("change", function (e) {
            var selected_element = $(e.currentTarget);
            var select_val = selected_element.val();
            axios.post('/AJAX/EditTryCount/', { id: @Model.TestTemplateId, TryCount: select_val}, {
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                //alert(response.data);
            }).catch(error => {
                alert('Error')
            });
        });

        $('.targetProcent').on("change", function (e) {
            //p = $('.targetProcent').val();
            //p = p + "%"
        });

        $('.saved').on("click", function () {
            app5.checkForm();
            var target = $('.targetProcent').val();
            if (!target) {
                target = 0;
                //alert(target);
            }
            if (target > 1) {
                axios.post('/AJAX/SaveTestTemplate/', { id: @Model.TestTemplateId, targetProcent: target }, {
                    headers: {
                        'Content-Type': 'application/json',
                    }
                }).then(response => {
                    //alert(response.data);
                    window.location = '/TTS/'
                }).catch(error => {
                    alert('Error')
                });
            }

        });

        function CatCreate() {
            $('#CatEditor').modal('show');

        }

        function CatNew() {
            var name = $('#isNew').val();
            //alert(name);
                $.ajax({
                    type: "POST",
                    url: "/AJAX/CreateCategory/",
                    data: { ParentId: 0, NameCategory: name, TreeTypeId: 1},
                    success: function (data) {
                        app4.testTemplateItemSubject.push(JSON.parse(data));
                        $('#CatEditor').modal('hide');
                    },
                    error: function () {
                        alert('Error');
                        Metronic.unblockUI('.page-content');
                    }
                });
        }

    </script>


}

@section Styles{
    <link rel="stylesheet" type="text/css" href="~/Plugins/Dropzone/min/basic.min.css" />
    <link rel="stylesheet" type="text/css" href="~/Plugins/Dropzone/min/dropzone.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css" rel="stylesheet" />

}
